{
	"info": {
		"_postman_id": "02408f09-9f03-47cd-8a4e-c89a5b188043",
		"name": "Production",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Zoho CRM",
			"item": [
				{
					"name": "Generate Access Token and Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "287232bf-b283-43e1-9b66-87053e2c3f5d",
								"exec": [
									"if (responseCode.code === 200)\r",
									"{\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"    pm.environment.set(\"prod-refresh-token\", jsonData.refresh_token);\r",
									"    pm.environment.set(\"prod-access-token\", jsonData.access_token);\r",
									"    pm.environment.set(\"prod-expiry-time\", Date.now() + parseInt(jsonData.expires_in));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "95918ad6-09d3-4ffa-82c6-787fc7976135",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://accounts.zoho.com/oauth/v2/token?access_type=offline&prompt=consent&client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&redirect_uri=https://www.getpostman.com/oauth2/callback&code=1000.60c3878e7b82aa60c46e2710d80d1621.b9c49c3c379f9cd4ce1fd352784f10af&grant_type=authorization_code",
							"protocol": "https",
							"host": [
								"accounts",
								"zoho",
								"com"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							],
							"query": [
								{
									"key": "access_type",
									"value": "offline"
								},
								{
									"key": "prompt",
									"value": "consent"
								},
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "code",
									"value": "1000.60c3878e7b82aa60c46e2710d80d1621.b9c49c3c379f9cd4ce1fd352784f10af"
								},
								{
									"key": "grant_type",
									"value": "authorization_code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Tokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44ccb017-7ffd-47f8-be5b-2a59751cf7fd",
								"exec": [
									"pm.variables.set(\"client_id\", pm.environment.get(\"prod_zoho_client_id\"));\r",
									"pm.variables.set(\"client_secret\", pm.environment.get(\"prod_zoho_client_secret\"));\r",
									"pm.variables.set(\"refresh_token\", pm.environment.get(\"prod-refresh-token\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "817a62f9-33d0-47e8-9bb8-a3e59e1e81eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{prod-refresh-token}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								}
							]
						},
						"url": "https://accounts.zoho.com/oauth/v2/token"
					},
					"response": []
				},
				{
					"name": "Refresh Access Tokens - Client Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44ccb017-7ffd-47f8-be5b-2a59751cf7fd",
								"exec": [
									"pm.variables.set(\"client_id\", pm.environment.get(\"prod_zoho_client_id\"));\r",
									"pm.variables.set(\"client_secret\", pm.environment.get(\"prod_zoho_client_secret\"));\r",
									"pm.variables.set(\"refresh_token\", pm.environment.get(\"prod-refresh-token\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dfc6277c-5b24-46dd-9f4f-6da29b20a6db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://accounts.zoho.com/oauth/v2/token?client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ&soid=ZohoCRM.747501552",
							"protocol": "https",
							"host": [
								"accounts",
								"zoho",
								"com"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "scope",
									"value": "ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ"
								},
								{
									"key": "soid",
									"value": "ZohoCRM.747501552"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "COQL Request - TEST",
					"id": "6038bb28-d5ad-448f-9a84-200837a9a436",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1000.0c043fa21d9d457d35088cbefb76fd46.820f3daf52641e23cd0c247b8fd08899",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"select_query\" : \"SELECT id, Name, Last_Update_Escrow FROM Trucks WHERE Name = '3AKJHHDR5PSNZ9052' AND Last_Update_Escrow < '2024-04-30'\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/coql"
					},
					"response": []
				},
				{
					"name": "POST Select Truck by VIN & Last_Update_Prop_Tax_Escrow COQL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90ee470d-9fb6-4c87-b781-44e8ab6de41c",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8d5ac6b3-9ed8-45b1-b198-a020a3c412e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"select_query\" : \"SELECT id, Name FROM Trucks WHERE Name = '{{truckVIN}}' AND Last_Update_Prop_Tax_Escrow < '{{today}}'\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/coql"
					},
					"response": []
				},
				{
					"name": "POST Select Truck by VIN & Last_Update_Escrow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90ee470d-9fb6-4c87-b781-44e8ab6de41c",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1b20c412-e442-408f-a8b0-1bf4de6f49df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"select_query\" : \"SELECT id, Name FROM Trucks WHERE Name = '{{truckVIN}}' AND (Last_Update_Escrow < '{{today}}' OR Last_Update_Escrow is null)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/coql"
					},
					"response": []
				},
				{
					"name": "POST Select Truck by VIN & Last_Update_Escrow COQL TEST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90ee470d-9fb6-4c87-b781-44e8ab6de41c",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e4c76075-cc24-4ea9-9f0a-4b0150e1c62f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1000.c62feb1c2c3e24e00df3a202e3d11336.32bf5befd3ef017c26130f2b7956cbce"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"select_query\" : \"SELECT id, Name FROM Trucks WHERE Name = '3AKJHLDV0SDVN4677' AND (Last_Update_Escrow < '{{today}}' OR Last_Update_Escrow is null)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/coql"
					},
					"response": []
				},
				{
					"name": "POST Select Truck by VIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90ee470d-9fb6-4c87-b781-44e8ab6de41c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2fd5a09e-b0f6-4587-a6cd-85e5bf85519c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"select_query\" : \"SELECT id, Name FROM Trucks WHERE Name = '{{truckVIN}}'\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/coql"
					},
					"response": []
				},
				{
					"name": "Update Zonar on Trucks in Zoho CRM",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44ccb017-7ffd-47f8-be5b-2a59751cf7fd",
								"exec": [
									"var requestGetMSToken = {\r",
									"    url: `https://login.microsoftonline.com/${pm.environment.get(\"microsoft_tenant_id\")}/oauth2/v2.0/token`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            { key: 'grant_type', value: 'client_credentials' },\r",
									"            { key: 'client_id', value: pm.environment.get(\"prod_microsoft_client_id\") },\r",
									"            { key: 'client_secret', value: pm.environment.get(\"prod_microsoft_client_secret\") },\r",
									"            { key: 'scope', value: 'https://graph.microsoft.com/.default openid offline_access' }\r",
									"        ]\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(requestGetMSToken, function (err, tokenMSResponse) {\r",
									"    if (err) {\r",
									"        console.error('Error:', err);\r",
									"        return;\r",
									"    }\r",
									"    console.log('Response: ', tokenMSResponse.json());\r",
									"    var parsedToken = tokenMSResponse.json();\r",
									"    // console.log(\"ms access token: \",parsedToken);\r",
									"    var accessToken = parsedToken.access_token;\r",
									"    pm.variables.set(\"microsoft_access_token\",accessToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f725373-7b35-4b93-a71e-f01712c0e4d9",
								"exec": [
									"function buildQueryString(params) {\r",
									"    return Object.keys(params)\r",
									"        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\r",
									"        .join('&');\r",
									"}\r",
									"\r",
									"function formatDateToZohoCRM(date) {\r",
									"    return date.toISOString().split('.')[0]; // This removes the milliseconds and timezone info\r",
									"}\r",
									"\r",
									"const mileageDate = new Date();\r",
									"const formattedDate = formatDateToZohoCRM(mileageDate);\r",
									"console.log(\"Formatted Date for Zoho CRM:\", formattedDate);\r",
									"\r",
									"const loop = [1];\r",
									"// const loop = [1, 2, 3, 4, 5, 6];\r",
									"let RecCnt = 0;\r",
									"let UpdtCnt = 0;\r",
									"let flag_error = 0;\r",
									"let pm_map_error = {};\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var zoho_access_token = jsonData.access_token;\r",
									"\r",
									"const currentDate = new Date();\r",
									"const endtime = Math.floor(currentDate.getTime() / 1000);\r",
									"const stime = new Date(currentDate.getTime() - 7 * 24 * 60 * 60 * 1000);\r",
									"const starttime = Math.floor(stime.getTime() / 1000);\r",
									"\r",
									"pm.environment.set(\"starttime\", starttime.toString());\r",
									"pm.environment.set(\"endtime\", endtime.toString());\r",
									"\r",
									"const criteriaText = \"(Truck_Status:equals:-Delivered)\";\r",
									"const zonarP = pm.environment.get(\"zonar_p\");\r",
									"const zonarU = pm.environment.get(\"zonar_u\");\r",
									"const enableUpdates = true;\r",
									"const perPage = 5;\r",
									"\r",
									"console.log(\"enableUpdates: \" + enableUpdates);\r",
									"\r",
									"const csvFileRow = [\"VIN,MPG,Odometer,Distance\"];\r",
									"\r",
									"async function fetchAllTrucks(criteriaText, page) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: `https://www.zohoapis.com/crm/v2/Trucks/search?criteria=${criteriaText}&page=${page}&per_page=${perPage}`,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': `Zoho-oauthtoken ${zoho_access_token}`\r",
									"            }\r",
									"        }, (err, response) => {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve(response.json().data);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"async function fetchZonarData(paramMap) {\r",
									"    const queryParams = buildQueryString(paramMap);\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: `https://omi.zonarsystems.net/interface.php?${queryParams}`,\r",
									"            method: 'GET',\r",
									"            timeout: 5000 //5 seconds\r",
									"        }, (err, response) => {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve(response.json());\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"async function updateRecord(module, id, data) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: `https://www.zohoapis.com/crm/v2/${module}/${id}`,\r",
									"            method: 'PUT',\r",
									"            header: {\r",
									"                'Authorization': `Zoho-oauthtoken ${zoho_access_token}`\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ data: [data] })\r",
									"            }\r",
									"        }, (err, response) => {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve(response.json());\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"async function sendEmail(subject, message, csvFileName, csvContent) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: `https://graph.microsoft.com/v1.0/users/${pm.environment.get(\"microsoft_user_id\")}/sendMail`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                Authorization: `Bearer ${pm.variables.get(\"microsoft_access_token\")}`,\r",
									"                'Content-Type': \"application/json\"\r",
									"            },\r",
									"            body: {\r",
									"                message: {\r",
									"                    subject: subject,\r",
									"                    body: {\r",
									"                        contentType: \"html\",\r",
									"                        content: `${message}`\r",
									"                    },\r",
									"                    toRecipients: [{\r",
									"                        emailAddress: {\r",
									"                            address: \"lgiuffre@teamrel.com\"\r",
									"                        }\r",
									"                    }],                    \r",
									"                    \"attachments\": [{\r",
									"                        \"@odata.type\": \"#microsoft.graph.fileAttachment\",\r",
									"                        \"name\": csvFileName,\r",
									"                        \"contentType\": \"text/csv\",\r",
									"                        \"contentBytes\": Buffer.from(csvContent).toString('base64')\r",
									"                    }]\r",
									"                },\r",
									"                saveToSentItems: \"true\"\r",
									"            }\r",
									"        }, (err, res) => {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve(res);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"(async function () {\r",
									"    for (let ele of loop) {\r",
									"        try {\r",
									"            const alltrucks = await fetchAllTrucks(criteriaText, ele);\r",
									"\r",
									"            if (alltrucks.length === 0) break;\r",
									"\r",
									"            for (let truck of alltrucks) {\r",
									"                let final = {};\r",
									"                let final2 = {};\r",
									"                const vin = truck.Name;\r",
									"                console.log(vin);\r",
									"                const gpsID = truck.Zonar_GPS_ID;\r",
									"\r",
									"                if (gpsID) {\r",
									"                    RecCnt++;\r",
									"                    const trkID = truck.id;\r",
									"                    const InserviceDate = truck.Lease_Start_Date;\r",
									"\r",
									"                    const paramMap = {\r",
									"                        customer: \"rel9300\",\r",
									"                        username: zonarU,\r",
									"                        password: zonarP,\r",
									"                        action: \"showposition\",\r",
									"                        operation: \"path\",\r",
									"                        format: \"json\",\r",
									"                        starttime: starttime,\r",
									"                        endtime: endtime,\r",
									"                        version: \"2\",\r",
									"                        logvers: \"3.8\",\r",
									"                        reqtype: \"vin\",\r",
									"                        target: vin\r",
									"                    };\r",
									"\r",
									"                    try {\r",
									"                        const actResp = await fetchZonarData(paramMap);\r",
									"                        \r",
									"                        if (actResp.error) {\r",
									"                            throw new Error(`Odometer Script Failed on ${vin} with the following error ${actResp}`);\r",
									"                        }\r",
									"                        \r",
									"                        const pathEvents = actResp.pathevents;\r",
									"                        const assetCount = pathEvents.assetcount;\r",
									"\r",
									"                        if(assetCount > 0)\r",
									"                        {\r",
									"\r",
									"                            const asset = pathEvents.assets;\r",
									"                            const recordCount = asset[0].eventcount;                            \r",
									"                            let last_odometer = 0, last_distance = 0, first_distance = 0, last_fuel_counter = 0, first_fuel_counter = 0, distance_traveled = 0, mpg = 0;\r",
									"\r",
									"                            if (recordCount > 0) {\r",
									"                                const events = asset[0].events;\r",
									"\r",
									"                                for (let i = 0; i < events.length; i++) {\r",
									"                                    const event = events[i];\r",
									"                                    if (i === recordCount - 1) {\r",
									"                                        last_odometer = parseInt(event.odometer || 0, 10);\r",
									"                                        last_distance = parseInt(event.distance_traveled || 0, 10);\r",
									"                                        last_fuel_counter = parseInt((event.fuel_counter ? event.fuel_counter.replace(\",\", \"\") : 0), 10);\r",
									"                                    }\r",
									"                                    if (i === 1) {\r",
									"                                        first_distance = parseInt(event.distance_traveled || 0, 10);\r",
									"                                        first_fuel_counter = parseInt((event.fuel_counter ? event.fuel_counter.replace(\",\", \"\") : 0), 10);\r",
									"                                    }\r",
									"                                }\r",
									"\r",
									"                                if (last_distance > 0 && !isNaN(last_fuel_counter) && !isNaN(first_fuel_counter)) {\r",
									"                                    distance_traveled = last_distance - first_distance;\r",
									"                                    const fuel_consumed = last_fuel_counter - first_fuel_counter;\r",
									"                                    mpg = ((distance_traveled / fuel_consumed) * 10).toFixed(1);\r",
									"                                }\r",
									"                            }\r",
									"\r",
									"                            if (mpg > 0) final.MPG = parseInt(mpg);\r",
									"                            final.Mileage_Driven = distance_traveled;\r",
									"                            final.Current_Mileage = last_odometer;\r",
									"                            final.Mileage_Last_Updated = formattedDate;\r",
									"                            console.log(\"final: \" + JSON.stringify(final));\r",
									"                            final2.Current_Mileage = last_odometer;\r",
									"                            final2.Solution_Center_Start_Date = InserviceDate || \"\";\r",
									"                            console.log(\"final2: \" + JSON.stringify(final2));\r",
									"                            if (enableUpdates) {\r",
									"                                try {\r",
									"                                    const update = await updateRecord('Trucks', trkID, final);\r",
									"                                    const truckRecStatus = update.data[0].status;\r",
									"                                    const updateTruckRecDetails = update.data[0].details;                 \r",
									"                                    if (truckRecStatus != \"success\") {\r",
									"                                        throw new Error(`Truck Rec Failed to Update: ${vin}`);\r",
									"                                    } else {      \r",
									"                                        console.log(\"Truck Rec Update Modified Time: \" + updateTruckRecDetails.Modified_Time);\r",
									"                                        UpdtCnt++;\r",
									"                                    }\r",
									"\r",
									"                                    const pmID = await new Promise((resolve, reject) => {\r",
									"                                        pm.sendRequest({\r",
									"                                            url: `https://www.zohoapis.com/crm/v2/Trucks/${trkID}/Truck_PM`,\r",
									"                                            method: 'GET',\r",
									"                                            header: {\r",
									"                                                'Authorization': `Zoho-oauthtoken ${zoho_access_token}`\r",
									"                                            }\r",
									"                                        }, (err, response) => {\r",
									"                                            if (err) {\r",
									"                                                reject(err);\r",
									"                                            } else {\r",
									"                                                try {\r",
									"                                                    const responseBody = response.text(); // Get the raw response text\r",
									"\r",
									"                                                    // Check if the response is empty or just whitespace\r",
									"                                                    if (!responseBody.trim()) {\r",
									"                                                        console.log('Error: No data for Truck PM Rec, empty input');\r",
									"                                                    } else {\r",
									"                                                        const jsonData = JSON.parse(responseBody); // Parse the text as JSON\r",
									"\r",
									"                                                        // Check if 'data' key is present\r",
									"                                                        if ('data' in jsonData) {\r",
									"                                                            resolve(jsonData.data);\r",
									"                                                        } else {\r",
									"                                                            reject(new Error(\"Error: 'data' key not found in the JSON response\"));\r",
									"                                                        }\r",
									"                                                    }\r",
									"                                                } catch (e) {\r",
									"                                                    reject(new Error(\"JSON error occurred: \" + e.message));\r",
									"                                                }\r",
									"                                            }\r",
									"                                        });\r",
									"                                    });\r",
									"                                    \r",
									"                                    for (let rec of pmID) {\r",
									"                                        const pm_update = await updateRecord('Truck_PM', rec.id, final2);\r",
									"                                        const pm_rec_status = pm_update.data[0].status;\r",
									"                                        const pm_rec_details = pm_update.data[0].details;\r",
									"                                        if (pm_rec_status != \"success\") {\r",
									"                                            throw new Error(`Truck Rec Failed to Update: ${vin}`);\r",
									"                                        } else {\r",
									"                                            console.log(\"Truck PM Rec Modified Time: \" + pm_rec_details.Modified_Time);\r",
									"                                        }\r",
									"                                    }\r",
									"                                } catch (error) {\r",
									"                                    pm_map_error[vin] = error.message;\r",
									"                                    flag_error = 1;\r",
									"                                    console.error(error);\r",
									"                                }\r",
									"                            }\r",
									"\r",
									"                            csvFileRow.push(`${vin},${mpg},${last_odometer},${distance_traveled}`);\r",
									"                        }\r",
									"                    } catch (error) {\r",
									"                        pm_map_error[vin] = error.message;\r",
									"                        flag_error = 1;\r",
									"                        console.error(error);\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        } catch (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"    }\r",
									"\r",
									"    const csvFileName = `truck_export_${endtime}.csv`;\r",
									"    const csvContent = csvFileRow.join('\\n');\r",
									"\r",
									"    pm.environment.set('csvFileContent', csvContent);\r",
									"\r",
									"    if (flag_error === 1) {\r",
									"        await sendEmail('Schedule - Zonar Updates for Truck and PM Records', `Schedule Failed: <br><br>${JSON.stringify(pm_map_error, null, 2)}<br><br>`, csvFileName, csvContent);\r",
									"        console.log(\"Schedule - Zonar Updates for Truck and PM Records Failed: \" + JSON.stringify(pm_map_error, null, 2));\r",
									"    } else {\r",
									"        await sendEmail('Schedule - Zonar Updates for Truck and PM Records - Completed Update', `Odometer Script Completed Update<br><br>Total Records Updated = ${UpdtCnt}<br><br>Total Record Count = ${RecCnt}<br><br>`, csvFileName, csvContent);\r",
									"\r",
									"        console.log(\"Schedule - Zonar Updates for Truck and PM Records - Completed Update: \" + `Total Records Updated = ${UpdtCnt}, Total Record Count = ${RecCnt}`);\r",
									"    }\r",
									"})();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8cfbd138-e5a8-4e7b-b349-30d9e7d3aeb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://accounts.zoho.com/oauth/v2/token?client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ&soid=ZohoCRM.747501552",
							"protocol": "https",
							"host": [
								"accounts",
								"zoho",
								"com"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "scope",
									"value": "ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ"
								},
								{
									"key": "soid",
									"value": "ZohoCRM.747501552"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Account by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5580f58b-f321-4967-9e2f-f0e0fbc525df",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"// Fixed TypeError by checking if jsonData.data is not null and has length\r",
									"if(jsonData.data && jsonData.data.length > 0) {\r",
									"    // pm.environment.set(\"z_Accounts_acct_id\", jsonData.data[0][\"id\"]);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f7eb935f-8e45-45e0-b115-8ee9966263dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": "https://www.zohoapis.com/crm/v2/Accounts/{{z_Accounts_acct_id}}"
					},
					"response": []
				},
				{
					"name": "GET Truck by VIN - Last Update Escrow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5b99b55-8062-4c13-aba0-d59531d6b9d7",
								"exec": [
									"// // Test if the response status code is 200 OK\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// // Test if the response body is a valid JSON\r",
									"// pm.test(\"Response body is JSON\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// // Test if the response contains a specific key\r",
									"// pm.test(\"Response contains key 'results'\", function () {\r",
									"//     pm.expect(pm.response.json()).to.have.property('data');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41bde604-c700-4cf4-98f4-f475058bb019",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f52c89cb-ee3e-4150-af96-d4c540d4f1eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v6/Trucks/search?criteria=((Name%3Ain%3A{{z_VIN}})and(Last_Update_Escrow%3Aless_than%3A{{today}}))",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v6",
								"Trucks",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "((Name%3Ain%3A{{z_VIN}})and(Last_Update_Escrow%3Aless_than%3A{{today}}))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Truck by VIN - Last Update Prop Tax Escrow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5b99b55-8062-4c13-aba0-d59531d6b9d7",
								"exec": [
									"// // Test if the response status code is 200 OK\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// // Test if the response body is a valid JSON\r",
									"// pm.test(\"Response body is JSON\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// // Test if the response contains a specific key\r",
									"// pm.test(\"Response contains key 'results'\", function () {\r",
									"//     pm.expect(pm.response.json()).to.have.property('data');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41bde604-c700-4cf4-98f4-f475058bb019",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4a295ddd-c925-40ac-bbc2-264948e80e13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v6/Trucks/search?criteria=((Name%3Aequals%3A{{z_VIN}})and(Last_Update_Prop_Tax_Escrow%3Aless_than%3A{{today}}))",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v6",
								"Trucks",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "((Name%3Aequals%3A{{z_VIN}})and(Last_Update_Prop_Tax_Escrow%3Aless_than%3A{{today}}))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Truck by VIN w/o Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5b99b55-8062-4c13-aba0-d59531d6b9d7",
								"exec": [
									"// // Test if the response status code is 200 OK\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// // Test if the response body is a valid JSON\r",
									"// pm.test(\"Response body is JSON\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// // Test if the response contains a specific key\r",
									"// pm.test(\"Response contains key 'results'\", function () {\r",
									"//     pm.expect(pm.response.json()).to.have.property('data');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41bde604-c700-4cf4-98f4-f475058bb019",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ae8c2e0f-65bd-46f7-94a7-72350b73980d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v6/Trucks/search?criteria=((Name%3Aequals%3A{{z_VIN}}))",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v6",
								"Trucks",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "((Name%3Aequals%3A{{z_VIN}}))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Truck by VIN - TEST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9856aa7f-8bb8-4343-9f5c-adeda5edb6ff",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", encodeURIComponent(moment().format(\"YYYY-MM-DD\")));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "477b1dff-6add-47d3-bd1d-82d8751e71ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1000.62c4dffac5315593b4028ae8882f3803.35618e09e900658e26496c43e01c52f1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v6/Trucks/search?criteria=(Name%3Aequals%3A3AKJHHDR8KSKC1618)and(Last_Update_Escrow%3Aless_than%3A{{today}})",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v6",
								"Trucks",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "(Name%3Aequals%3A3AKJHHDR8KSKC1618)and(Last_Update_Escrow%3Aless_than%3A{{today}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Sales Order by ID",
					"id": "0e27cb28-707b-43c7-aedf-d1594944a03c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": "https://www.zohoapis.com/crm/v2/Sales_Orders/{{z_so_id}}"
					},
					"response": []
				},
				{
					"name": "GET SCO/PhysDam Invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a2f0fa3-1077-4607-8ada-09a036a6a5dc",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"// Fixed TypeError by checking if jsonData.data is not null and has length",
									"if(jsonData.data && jsonData.data.length > 0) {",
									"    // pm.environment.set(\"inv_acct_id\", jsonData.data[0][\"Account_Name\"][\"id\"]);",
									"    // pm.collectionVariables.set(\"inv_acct_id_c\", jsonData.data[0][\"Account_Name\"][\"id\"]);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c45f007e-9b98-4c10-a1fa-089bf2439ea0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v2/Invoices/search?criteria=((Status:equals:PhysDam/NTL Insurance Billing) or (Status:equals:SCO Billing) or (Status:equals:SCO Escrow Billing))",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v2",
								"Invoices",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "((Status:equals:PhysDam/NTL Insurance Billing) or (Status:equals:SCO Billing) or (Status:equals:SCO Escrow Billing))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Approved Invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a2f0fa3-1077-4607-8ada-09a036a6a5dc",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a9dac620-a8b1-4f68-93fe-c80ec70492c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v2/Invoices/search?criteria=(Status:equals:Approved)",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v2",
								"Invoices",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "(Status:equals:Approved)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Ready for NetLessor Lease",
					"id": "a62ce557-4bde-47d1-955a-35500bb22321",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.zohoapis.com/crm/v2/Sales_Orders/search?criteria=(Status:equals:Ready For NetLessor Lease)",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v2",
								"Sales_Orders",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "(Status:equals:Ready For NetLessor Lease)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Product by ID",
					"id": "fa8ddd69-eb6f-4e09-8e50-ca01194499a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": "https://www.zohoapis.com/crm/v2/Products/{{z_prod_id}}"
					},
					"response": []
				},
				{
					"name": "GET Delivered Trucks and Run Zonar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74138cb0-972a-4ea8-972c-b500c7f2056c",
								"exec": [
									"var requestGetToken = {\r",
									"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded'\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
									"    if (err) {\r",
									"        console.error('Error:', err);\r",
									"        return;\r",
									"    }\r",
									"    console.log('Response:', tokenResponse.json());\r",
									"    var parsedToken = tokenResponse.json();\r",
									"    console.log(parsedToken);\r",
									"    var accessToken = parsedToken.access_token;\r",
									"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "303d7f05-caa7-4a47-8981-0e3123e30244",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{zoho_access_token}}"
							}
						],
						"url": {
							"raw": "https://www.zohoapis.com/crm/v6/Trucks/search?criteria=((Truck_Status%3Aequals%3A-Delivered))",
							"protocol": "https",
							"host": [
								"www",
								"zohoapis",
								"com"
							],
							"path": [
								"crm",
								"v6",
								"Trucks",
								"search"
							],
							"query": [
								{
									"key": "criteria",
									"value": "((Truck_Status%3Aequals%3A-Delivered))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Truck Monthly Loan Financials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c32652e6-c885-4802-92c5-aef76c853a7c",
								"exec": [
									"// Test if the response status code is 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test if the response body is a valid JSON\r",
									"pm.test(\"Response body is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response contains a specific key\r",
									"pm.test(\"Response contains key 'data'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0aebd6c5-124d-4af6-838b-71b41ad3f817",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4a363c93-80f2-4bed-8a51-f2b924aab8ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"REL_Monthly_Pmt\": {{z_rel_monthly_pmt}},\r\n            \"Remaining_REL_Obligation\": {{z_remaining_rel_obligation}},\r\n            \"Acquisition_Cost\": {{z_acquisition_cost}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/{{z_truck_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Invoice to Processed",
					"id": "ce123462-6873-47c2-b2bb-bb7e56984542",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Status\": \"Processed\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Invoices/{{inv_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Sales Order to Invoiced",
					"id": "33c7b14f-848f-4fce-8e92-d4c6afd1354b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Status\": \"Invoiced\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Sales_Orders/{{inv_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Truck Financials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94fc0d51-6a1b-4c72-ab97-de94ae5e9aed",
								"exec": [
									"// Parse the date string from the variables\r",
									"const dateFunded = new Date(pm.variables.get(\"dateFunded\"));\r",
									"const leaseExpiration = new Date(pm.variables.get(\"leaseExpiration\"));\r",
									"\r",
									"// Format the dates as YYYY-MM-DD\r",
									"const dfFormatted = dateFunded.toISOString().split('T')[0];\r",
									"const leFormatted = leaseExpiration.toISOString().split('T')[0];\r",
									"\r",
									"// Set the formatted date back to the variables\r",
									"pm.variables.set(\"dateFunded\", dfFormatted);\r",
									"pm.variables.set(\"leaseExpiration\", leFormatted);\r",
									"\r",
									"// Get the value of the variable\r",
									"const wklyPmtValue = pm.variables.get(\"wklyPmt\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!wklyPmtValue) {\r",
									"    pm.variables.set(\"wklyPmt\",0);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "426d77c3-60f1-4731-9125-bf62649dbb50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": [\r\n    {\r\n    \"Financed_Amount\": \"{{salesPrice}}\",\r\n    \"Terms_Weeks\": \"{{leaseTerm}}\",\r\n    \"Residual\" : \"{{residual}}\",\r\n    \"Down_Payment\" : \"{{downPayment}}\",\r\n    \"Weekly_Payment\" : \"{{wklyPmt}}\",\r\n    \"Weekly_Escrow_Payment\" : \"{{wklyEscrow}}\",\r\n    \"Interest_Rate\" : \"{{interestRate}}\",\r\n    \"Lease_Expiration\" : \"{{leaseExpiration}}\",\r\n    \"Date_Funded\" : \"{{dateFunded}}\",\r\n    \"PhysDam_Wkly_Premium\" : \"{{physDamWklyPmt}}\",\r\n    \"Property_Tax_Escrow\" : \"{{propertyTax}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/{{z_truck_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Lease Period Info on Truck",
					"id": "ae677564-70f5-4041-bd84-a884cfabd644",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Lease_Period\": \"{{z_lease_period}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/{{z_truck_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Sales Order to Processed",
					"id": "b07468ad-8580-4edc-9ca0-c965ac38ba27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Status\": \"Lease Processed\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Sales_Orders/{{so_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Escrow on Truck",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d46f1496-a97b-4db1-8f99-d2301fefd000",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "88bb5a0d-f91e-4dfb-b9e0-575341f17775",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Escrow\": {{SUM(amount)}},\r\n            \"Last_Update_Escrow\": {{today}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/{{z_truck_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Escrow on Truck - TEST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d46f1496-a97b-4db1-8f99-d2301fefd000",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c43c99ce-929c-46df-98c1-3021516c3ce8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1000.98b92c094ca1f0425f11130cb11e39db.a960133765fdd8a6b89793e8aa29e4a8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Escrow\": 600,\r\n            \"Last_Update_Escrow\": {{today}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/4816208000072394121"
					},
					"response": []
				},
				{
					"name": "PUT Property Tax Escrow on Truck",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d46f1496-a97b-4db1-8f99-d2301fefd000",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"today\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0ab1ac22-ecea-4552-96cb-f0663a5281d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"Property_Tax_Escrow\": {{SUM(gross)}},\r\n            \"Last_Update_Prop_Tax_Escrow\": {{today}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://www.zohoapis.com/crm/v6/Trucks/{{z_truck_id}}"
					},
					"response": []
				}
			],
			"id": "2a0dda68-06d3-46b0-b0de-87a7dec7fc54",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bb7d153d-2a03-4b5e-951b-86a586b85a31",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c445ee7-a0f8-4028-8da6-bc443d28167b",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NetSuite",
			"item": [
				{
					"name": "GET Custom Search - Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc1c4e1a-66db-41ac-874c-b5cbfa2d5c4b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "490fa7a1-8167-4a63-9ddc-628727212148",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fed12e65-a226-4f56-b1c9-015f7b551391",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1037\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Custom Search - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc1c4e1a-66db-41ac-874c-b5cbfa2d5c4b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "490fa7a1-8167-4a63-9ddc-628727212148",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cdb3deb8-14b5-4c67-9b66-416fdc1cf374",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1038\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Monthly Loan Financials by VIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c2febd9-355e-4efe-8e8c-d21b63f37e33",
								"exec": [
									"if(pm.environment.get(\"enableProd\") === \"true\") {\r",
									"    pm.environment.set(\"monthly_custom_search\",\"customsearch1037\");\r",
									"} else {\r",
									"    pm.environment.set(\"monthly_custom_search\",\"customsearch1037\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df4bc6b9-049a-43e2-816d-4f5c1ba87faa",
								"exec": [
									"// Test if the response status code is 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test if the response body is a valid JSON\r",
									"pm.test(\"Response body is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response contains a specific key\r",
									"pm.test(\"Response contains key 'results'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('results');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f5a93a57-bbbb-4f5e-87e6-7c5ea00f74e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1037\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Customer Lease Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f7b64d6-b70f-4abf-9de2-e09035a0e48e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f39c421-c71a-4306-b3e1-85a4e4679ebf",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a3e765ac-c81d-464f-b6ac-11523c0fc88d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1038\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Open AR CRM Input - Analytics",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f7b64d6-b70f-4abf-9de2-e09035a0e48e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f39c421-c71a-4306-b3e1-85a4e4679ebf",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7ee94a07-90b6-4dbb-972b-b265ae79b6d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1173\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Customer Remaining Balance Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f7b64d6-b70f-4abf-9de2-e09035a0e48e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f39c421-c71a-4306-b3e1-85a4e4679ebf",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e659e2f6-5884-40c0-b17e-ed96383ad1ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1048\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Truck Escrow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f978d71-0e2a-4f7a-b9c8-f4372057e9c9",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f114e630-f9e5-4ced-acf4-76ea123aa112",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch985\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
							"protocol": "https",
							"host": [
								"7936739",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "1001"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Prior Month Escrow Detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f978d71-0e2a-4f7a-b9c8-f4372057e9c9",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9026a1f3-be2b-4760-bd65-3ee44efb6fc2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c479a5c5-5a2f-41e3-97e8-f2cf40da846e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1188\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
							"protocol": "https",
							"host": [
								"7936739",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "1001"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Property Tax Escrow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f978d71-0e2a-4f7a-b9c8-f4372057e9c9",
								"exec": [
									"//Property Tax Escrow - By VIN (CRM Input)\r",
									"if(pm.environment.get(\"enableProd\") === \"true\") {\r",
									"    pm.environment.set(\"prop_escrow_custom_search\",\"customsearch1095\");\r",
									"} else {\r",
									"    pm.environment.set(\"prop_escrow_custom_search\",\"customsearch1095\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5da938c7-6911-48aa-8c39-0942551eccdf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1095\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Customer Info by Zoho ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95e37ebd-166d-4022-b831-6093d3471343",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "27f7e559-26eb-4ea9-8c6f-6234aa0a40eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1176\",\r\n    \"searchColumn\": \"externalid\",\r\n    \"searchValue\":\"{{searchValue}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_col_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_col_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Customer Info by Zoho ID -TEST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95e37ebd-166d-4022-b831-6093d3471343",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "60f09eed-e330-4aeb-8545-d3f34d64488e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"searchID\": \"customsearch1176\",\"searchColumn\": \"externalid\",\"searchValue\":\"4816208000000578745\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_col_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_col_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET NetLessor Lease by SO Num",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95e37ebd-166d-4022-b831-6093d3471343",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5255ac13-16f0-4930-bfeb-2802bb6c4def",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1178\",\r\n    \"searchColumn\": \"externalid\",\r\n    \"searchValue\":\"{{searchValue}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_col_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_col_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET NetLessor Lease by SO Num Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95e37ebd-166d-4022-b831-6093d3471343",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1640444f-8f15-4278-a64f-14a6282ea5f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"searchID\": \"customsearch1178\",\r\n    \"searchColumn\": \"externalid\",\r\n    \"searchValue\":\"4816208000023323315\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ns_acct_url_id}}.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script={{custom_search_col_script_id}}&deploy=1",
							"protocol": "https",
							"host": [
								"{{ns_acct_url_id}}",
								"restlets",
								"api",
								"netsuite",
								"com"
							],
							"path": [
								"app",
								"site",
								"hosting",
								"restlet.nl"
							],
							"query": [
								{
									"key": "script",
									"value": "{{custom_search_col_script_id}}"
								},
								{
									"key": "deploy",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Sales Order for SCO/PhysDam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c61c790-4b0b-4edb-828e-65f89b43d664",
								"exec": [
									"// Get the value of the variable\r",
									"const billAddr1Value = pm.variables.get(\"billing_addr1\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billAddr1Value) {\r",
									"    pm.variables.set(\"billing_addr1\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCity = pm.variables.get(\"billing_city\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCity) {\r",
									"    pm.variables.set(\"billing_city\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billState = pm.variables.get(\"billing_state\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billState) {\r",
									"    pm.variables.set(\"billing_state\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCode = pm.variables.get(\"billing_code\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCode) {\r",
									"    pm.variables.set(\"billing_code\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const items = pm.variables.get(\"items\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (items) {\r",
									"    // let itemsJson = JSON.parse(items);\r",
									"    // let modifiedObject = {};\r",
									"    // Object.keys(itemsJson).forEach(key => {\r",
									"    //     let newKey = key.replace(/\\d+/g, '');\r",
									"    //     modifiedObject[newKey] = itemsJson[key];\r",
									"    // });\r",
									"    // console.log(modifiedObject);\r",
									"\r",
									"    let modifiedJson = items.replace(/\\\"item\\d+\\\"/g, match => match.replace(/\\d+/g, ''));\r",
									"    console.log(\"items: \" + modifiedJson);\r",
									"    pm.variables.set(\"items\", modifiedJson);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e3d214b-1abb-4088-8ec7-a01854ac068d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "392a4a74-0cc7-44c9-9bf2-9363b7e65063",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"entity\": { \"id\": \"{{lastCustomer}}\" },\r\n\t\"item\": {\r\n\t\t\"items\": {{items}}\r\n\t},\r\n    \"memo\":\"{{memo}}\",\r\n    \"billaddr1\":\"{{billing_addr1}}\",\r\n    \"billcity\":\"{{billing_city}}\",\r\n    \"billstate\":\"{{billing_state}}\",\r\n    \"billzip\":\"{{billing_code}}\",\r\n    \"custbody_9997_is_for_ep_eft\":true,\r\n    \"subsidiary\":\"2\",\r\n    \"location\":\"2\",\r\n    \"custbody_esc_created_date\":\"{{invoice_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/salesOrder"
					},
					"response": []
				},
				{
					"name": "POST Sales Order for SCO/PhysDam - TEST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c61c790-4b0b-4edb-828e-65f89b43d664",
								"exec": [
									"// Get the value of the variable\r",
									"const billAddr1Value = pm.variables.get(\"billing_addr1\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billAddr1Value) {\r",
									"    pm.variables.set(\"billing_addr1\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCity = pm.variables.get(\"billing_city\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCity) {\r",
									"    pm.variables.set(\"billing_city\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billState = pm.variables.get(\"billing_state\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billState) {\r",
									"    pm.variables.set(\"billing_state\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCode = pm.variables.get(\"billing_code\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCode) {\r",
									"    pm.variables.set(\"billing_code\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const items = pm.variables.get(\"items\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (items) {\r",
									"    // let itemsJson = JSON.parse(items);\r",
									"    // let modifiedObject = {};\r",
									"    // Object.keys(itemsJson).forEach(key => {\r",
									"    //     let newKey = key.replace(/\\d+/g, '');\r",
									"    //     modifiedObject[newKey] = itemsJson[key];\r",
									"    // });\r",
									"    // console.log(modifiedObject);\r",
									"\r",
									"    let modifiedJson = items.replace(/\\\"item\\d+\\\"/g, match => match.replace(/\\d+/g, ''));\r",
									"    console.log(\"items: \" + modifiedJson);\r",
									"    pm.variables.set(\"items\", modifiedJson);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e3d214b-1abb-4088-8ec7-a01854ac068d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "08a81cf1-beba-43d2-a5d9-8de42917006b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"entity\": { \"id\": \"{{lastCustomer}}\" },\r\n\t\"item\": {\r\n\t\t\"items\": [{\"item\":{\"id\":\"64\"},\"item_display\":\"Phys Dmg Insurance Non-Leased\",\"rate\":57.69,\"quantity\":1,\"amount\":57.69},{\"item\":{\"id\":\"64\"},\"item_display\":\"Phys Dmg Insurance Non-Leased\",\"rate\":86.54,\"quantity\":1,\"amount\":86.54}]\r\n\t},\r\n    \"memo\":\"PhysDam/NTL Insurance for ZZ_Company2\",\r\n    \"billaddr1\":\"\",\r\n    \"billcity\":\"\",\r\n    \"billstate\":\"\",\r\n    \"billzip\":\"\",\r\n    \"custbody_9997_is_for_ep_eft\":true,\r\n    \"subsidiary\":\"2\",\r\n    \"location\":\"2\",\r\n    \"custbody_esc_created_date\":\"2024-02-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/salesOrder"
					},
					"response": []
				},
				{
					"name": "POST Sales Order from Invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c61c790-4b0b-4edb-828e-65f89b43d664",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e3d214b-1abb-4088-8ec7-a01854ac068d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d88289ad-2216-4a13-bfab-dd5f38d5368d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"entity\": { \"id\": \"{{lastCustomer}}\" },\r\n\t\"item\": {\r\n\t\t\"items\": {{items}}\r\n\t},\r\n    \"otherrefnum\": \"{{so_id}}\",\r\n    \"memo\":\"{{memo}}\",\r\n    \"billaddr1\":\"{{billing_addr1}}\",\r\n    \"billcity\":\"{{billing_city}}\",\r\n    \"billstate\":\"{{billing_state}}\",\r\n    \"billzip\":\"{{billing_code}}\",\r\n    \"custbody_9997_is_for_ep_eft\":true,\r\n    \"subsidiary\":\"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/salesOrder"
					},
					"response": []
				},
				{
					"name": "POST Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3bb27be7-ddd2-450b-b254-5ba38ed7ecb1",
								"exec": [
									"// Get the value of the variable\r",
									"const billStateValue = pm.variables.get(\"billing_state\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billStateValue) {\r",
									"    pm.variables.set(\"billing_state\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCodeValue = pm.variables.get(\"billing_code\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCodeValue) {\r",
									"    pm.variables.set(\"billing_code\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billAddrValue = pm.variables.get(\"billing_address\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billAddrValue) {\r",
									"    pm.variables.set(\"billing_address\",\"\");\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const billCityValue = pm.variables.get(\"billing_city\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!billCityValue) {\r",
									"    pm.variables.set(\"billing_city\",\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc469fcc-67a0-4c5d-9b0a-b82d4c2d8e51",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "be5151e0-20ac-43ec-8a00-977f6027fbeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"companyName\": \"{{acct_name}}\",\r\n\t\"addressBook\": {\r\n\t\t\"items\": [{\r\n\t\t\t\"label\": \"{{acct_name}} HQ\",\r\n\t\t\t\"addressBookAddress\": {\r\n\t\t\t\t\"country\": { \"id\": \"US\" },\r\n\t\t\t\t\"state\": \"{{billing_state}}\",\r\n\t\t\t\t\"zip\": \"{{billing_code}}\",\r\n                \"addressee\": \"{{acct_name}}\",\r\n                \"addr1\": \"{{billing_address}}\",\r\n                \"city\": \"{{billing_city}}\",\r\n                \"phone\": \"{{acct_phone}}\"\r\n\t\t\t}\r\n\t\t}]\r\n\t},\r\n    \"externalid\": \"{{zoho_account_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/Customer"
					},
					"response": []
				},
				{
					"name": "POST NetLessor Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b6a3e38-6b2b-4de8-a146-4f7a4e2d81f0",
								"exec": [
									"// pm.variables.set(pm.environment.get(\"lastLease\"));\r",
									"\r",
									"// // Parse the date string from the variables\r",
									"// const effectiveDate = new Date(pm.variables.get(\"Effective_Date\"));\r",
									"// effectiveDate.setTime(effectiveDate.getTime() + 518400000);\r",
									"// const updatedDate = effectiveDate.toISOString();\r",
									"\r",
									"// // Set the date back to the variables\r",
									"// pm.variables.set(\"Effective_Date\", updatedDate);\r",
									"\r",
									"// Get the value of the variable\r",
									"const wklyPropTaxPmtValue = pm.variables.get(\"Wkly_Property_Tax_Payment\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!wklyPropTaxPmtValue) {\r",
									"    pm.variables.set(\"Wkly_Property_Tax_Payment\",0);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "157547bf-5522-49a3-925e-5784f0debbe5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"custrecord_lma_lpa_nonls_payment_1\": {{Wkly_Escrow_Payment}},\r\n    \"custrecord_lma_lpa_nonls_payment_2\": 15,\r\n    \"custrecord_lma_lpa_nonls_payment_3\": 8.50,\r\n    \"custrecord_lma_lpa_frequency\": 7,\r\n    \"custrecord_lma_lpa_lease\": \"{{lastLease}}\",\r\n    \"custrecord_lma_lpa_nonls_payment_4\": {{PhysDam_Wkly_Premium}},\r\n    \"custrecord_lma_lpa_nonls_payment_5\": {{Wkly_Property_Tax_Payment}},\r\n    \"custrecord_lma_lpa_effective_date\": \"{{Effective_Date}}\",\r\n    \"custrecord_lma_lpa_payment_amount\": {{Lease_Payment}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/customrecord_lma_lease_payment"
					},
					"response": []
				},
				{
					"name": "POST NetLessor Lease",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1675bd9d-6836-4f5c-b57d-a6ac2bb9fb47",
								"exec": [
									" // Define the response body\r",
									"const responseBody = {\r",
									"    \"key\": \"value\"\r",
									"};\r",
									"\r",
									"// Set the response body\r",
									"pm.response.to.have.body(JSON.stringify(responseBody));\r",
									"\r",
									"// Send the response\r",
									"pm.sendRequest({\r",
									"    url: \"https://7936739-sb1.suitetalk.api.netsuite.com/services/rest/record/v1/customrecord_lma_lease\",\r",
									"    method: \"POST\",\r",
									"    body: JSON.stringify(responseBody),\r",
									"    headers: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c8ee2c4-7942-4f04-8af3-d112f3533405",
								"exec": [
									"// Get the value of the variable\r",
									"const ntlValue = pm.variables.get(\"NTL\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!ntlValue) {\r",
									"    pm.variables.set(\"NTL\",0);\r",
									"}\r",
									"\r",
									"// Get the value of the variable\r",
									"const vinValue = pm.variables.get(\"VIN\");\r",
									"\r",
									"// Check if the variable is empty or null\r",
									"if (!vinValue) {\r",
									"    pm.variables.set(\"VIN\",\"\");\r",
									"}\r",
									"\r",
									"const leaseTypeValue = pm.variables.get(\"Truck_Type\");\r",
									"\r",
									"if(leaseTypeValue) {\r",
									"    if(leaseTypeValue.toUpperCase() == \"TEAM\") {\r",
									"        //Team\r",
									"        pm.variables.set(\"Truck_Type\",\"1\");\r",
									"    } else if(leaseTypeValue.toUpperCase() == \"SOLO\") {\r",
									"        //Solo\r",
									"        pm.variables.set(\"Truck_Type\",\"2\");\r",
									"    } else if(leaseTypeValue.toUpperCase() == \"DAY CAB\") {\r",
									"        //Day Cab\r",
									"        pm.variables.set(\"Truck_Type\",\"3\");\r",
									"    } else if(leaseTypeValue.toUpperCase() == \"RE-FINANCE\") {\r",
									"        //Re-Finance\r",
									"        pm.variables.set(\"Truck_Type\",\"4\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3d245bf-a3ea-45ff-96e1-fb76208551eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": { \"id\": \"{{lastCustomer}}\" },\r\n\t\"altname\": \"{{Subject}}\",\r\n    \"custrecord_lma_ls_type\": \"{{Truck_Type}}\",\r\n    \"custrecord_lma_ls_subsidiary\": \"2\",\r\n    \"custrecord_lma_ls_currency\": \"1\",\r\n    \"custrecord_lma_ls_commencement_date\": \"{{In_Service_Date}}\",\r\n    \"custrecord_lma_ls_term\": {{Terms_Weeks}},\r\n    \"custrecord_fa_ast_vin\": \"{{VIN}}\",\r\n    \"custrecord_fa_ast_residual_value\": {{Residual_Value}},\r\n    \"custrecord_lma_ls_res_value_total_est\": {{Residual_Value}},\r\n    \"custrecord_lma_ls_department\": \"3\",\r\n    \"custrecord_lma_ls_class\": \"{{Class}}\",\r\n    \"custrecord_lma_ls_location\": \"2\",\r\n    \"custrecord_lma_ls_carrying_costs\": {{Leased_Asset_Cost}},\r\n    \"custrecord_lma_ls_lease_res_guarantee\": {{Residual_Value_Guaranteed}},\r\n    \"custrecord_lma_ls_fair_asset_value\": {{Leased_Asset_Fair_Value}},\r\n    \"custrecord_lma_ls_lease_notes\": \"{{Notes}}\",\r\n    \"externalid\": \"{{SO_Num}}\",\r\n    \"custrecord_lma_ls_prepayment\": {{Lease_Prepayments}},\r\n    \"custrecordactual_int_rate\": {{Actual_Interest_Rate}},\r\n    \"custrecordsales_price\": {{Sales_Price}},\r\n    \"custrecord155\": {{NTL}},\r\n    \"custrecord156\": {{PhysDam}},\r\n    \"custrecord_lma_ls_customer\": {{lastCustomer}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{ns_acct_url_id}}.suitetalk.api.netsuite.com/services/rest/record/v1/customrecord_lma_lease"
					},
					"response": []
				}
			],
			"id": "555694a4-d9ab-48d2-b5da-2d72eaebb596",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7fe21bce-4b7c-48e8-87d4-a53170553c8f",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"console.log(\"url query string \" + url_query_string);\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"console.log(\"base host \" + base_host);\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3b111e9c-9b7d-4667-a9ea-1a7c3d8ab055",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Microsoft",
			"item": [
				{
					"name": "POST Microsoft Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ef8592f-31e3-4240-897c-247ff35d917a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98486d14-7c7b-4b8c-afa9-8cf6c8e401ac",
								"exec": [
									"try {\r",
									"    // Parse the response body as JSON\r",
									"    const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"    console.log(jsonResponse.access_token);\r",
									"    \r",
									"    pm.environment.set(\"microsoft_access_token\",jsonResponse.access_token);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error('Error parsing response body as JSON:', error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6ef1d03f-1b6a-40f6-b59e-4a47b6f70e1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{prod_microsoft_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{prod_microsoft_client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "https://graph.microsoft.com/.default openid offline_access ",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": "https://login.microsoftonline.com/{{microsoft_tenant_id}}/oauth2/v2.0/token"
					},
					"response": []
				},
				{
					"name": "POST Send Mail",
					"id": "160c16ec-29fc-439a-b512-25ef8efefa4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"message\": {\r\n    \"subject\": \"{{flow_name}} Failed to Run\",\r\n    \"body\": {\r\n      \"contentType\": \"html\",\r\n      \"content\": \"<html>{{flow_name}} flow failed to run with the following request: {{request_name}}.<br /><br /></html>\"\r\n    },\r\n    \"toRecipients\": [\r\n      {\r\n        \"emailAddress\": {\r\n          \"address\": \"lgiuffre@teamrel.com\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"saveToSentItems\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://graph.microsoft.com/v1.0/users/{{microsoft_user_id}}/sendMail"
					},
					"response": []
				},
				{
					"name": "POST Create CSV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41e39ed5-643e-4b62-8295-4e5e30b671f4",
								"exec": [
									"\r",
									"var parentId = '01CCBEUGXLUZ73M5U7IFEJ5XYGX4DMTVAE';\r",
									"var siteId = 'b!5kb1FqhzQU6uuVtAY-0ADw9iqpw8HN5PmgivNUrL6wfw8L0CyVuzTrsBZ4apx6W_';\r",
									"\r",
									"// Hardcoded JSON data\r",
									"var jsonData = {\r",
									"    \"key1\": \"value1\",\r",
									"    \"key2\": \"value2\",\r",
									"    \"key3\": \"value3\"\r",
									"};\r",
									"\r",
									"var filename = \"test.csv\";\r",
									"\r",
									"// Function to convert JSON to CSV\r",
									"function jsonToCsv(jsonData) {\r",
									"    var csv = Object.keys(jsonData).map(key => `${key},${jsonData[key]}`).join('\\n');\r",
									"    return csv;\r",
									"}\r",
									"\r",
									"var csvContent = jsonToCsv(jsonData);\r",
									"\r",
									"// Set URI\r",
									"var apiUrl = `https://graph.microsoft.com/v1.0/Drives/${siteId}/items/${parentId}:/${filename}:/content`;\r",
									"\r",
									"// Set request options\r",
									"pm.request.url = apiUrl;\r",
									"pm.request.method = \"PUT\";\r",
									"pm.request.headers.add({\r",
									"    \"Authorization\": \"Bearer \" + pm.environment.get(\"microsoft_access_token\"),\r",
									"    \"Content-Type\": \"text/csv\" // Specify the content type as application/json\r",
									"});\r",
									"pm.request.body = {\r",
									"    mode: 'raw',\r",
									"    raw: csvContent\r",
									"};\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ed5da37a-e10d-4f7e-95e7-69c4975ff509",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://postman-echo.com"
					},
					"response": []
				},
				{
					"name": "POST Create CSV for Escrow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41e39ed5-643e-4b62-8295-4e5e30b671f4",
								"exec": [
									"\r",
									"var parentId = '01CCBEUGXLUZ73M5U7IFEJ5XYGX4DMTVAE';\r",
									"var siteId = 'b!5kb1FqhzQU6uuVtAY-0ADw9iqpw8HN5PmgivNUrL6wfw8L0CyVuzTrsBZ4apx6W_';\r",
									"\r",
									"// Hardcoded JSON data\r",
									"// var jsonData = {\r",
									"//     \"key1\": \"value1\",\r",
									"//     \"key2\": \"value2\",\r",
									"//     \"key3\": \"value3\",\r",
									"//     \"key4\": \"value4\"\r",
									"// };\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"// var results = jsonData.results;\r",
									"\r",
									"const moment = require('moment');\r",
									"const currentDate = moment().format(\"YYYY-MM-DD\");\r",
									"\r",
									"var filename = `updated_escrow_${currentDate}.csv`;\r",
									"\r",
									"// Function to convert JSON to CSV\r",
									"function jsonToCsv(jsonData) {\r",
									"    var csv = Object.keys(jsonData).map(key => `${key},${jsonData[key]}`).join('\\n');\r",
									"    return csv;\r",
									"}\r",
									"\r",
									"var csvContent = jsonToCsv(jsonData);\r",
									"\r",
									"// Set URI\r",
									"var apiUrl = `https://graph.microsoft.com/v1.0/Drives/${siteId}/items/${parentId}:/${filename}:/content`;\r",
									"\r",
									"// Set request options\r",
									"pm.request.url = apiUrl;\r",
									"pm.request.method = \"PUT\";\r",
									"pm.request.headers.add({\r",
									"    \"Authorization\": \"Bearer \" + pm.environment.get(\"microsoft_access_token\"),\r",
									"    \"Content-Type\": \"text/csv\" // Specify the content type as application/json\r",
									"});\r",
									"pm.request.body = {\r",
									"    mode: 'raw',\r",
									"    raw: csvContent\r",
									"};\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7ae85614-e06a-405f-97a5-cae8d074d26b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://postman-echo.com"
					},
					"response": []
				},
				{
					"name": "GET Site ID from Sharepoint",
					"id": "b8fba20f-978e-4df5-b436-73e2ffe2d22d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/sites/teamrelcom.sharepoint.com"
					},
					"response": []
				},
				{
					"name": "GET List of Drives from IT",
					"id": "08682c3c-0b4c-4262-8535-baf14dd6bec9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/sites/16f546e6-73a8-4e41-aeb9-5b4063ed000f/Drives"
					},
					"response": []
				},
				{
					"name": "GET List of Drives from Contracts",
					"id": "31d4bb08-d4ba-4e58-bc8a-44226a7b4026",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/sites/42dffe85-6c8e-4985-abf7-e2ec5d8448b5/Drives"
					},
					"response": []
				},
				{
					"name": "GET List of Drives from Contracts Copy",
					"id": "a7b7a93b-15d5-4752-a2d2-13db57b6091c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/sites/42dffe85-6c8e-4985-abf7-e2ec5d8448b5/Drives"
					},
					"response": []
				},
				{
					"name": "GET Folder ID from Test FedEx Folder",
					"id": "f0988dc4-1ad5-4cf9-9d2e-843d44f8d75c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/Drives/b!5kb1FqhzQU6uuVtAY-0ADw9iqpw8HN5PmgivNUrL6wfw8L0CyVuzTrsBZ4apx6W_/root:/FedEx"
					},
					"response": []
				},
				{
					"name": "GET Folder ID from FedEx Folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d33817e-725c-4f3b-a866-c11bfeb2ce62",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var results = jsonData.value;\r",
									"\r",
									"pm.visualizer.set(`<pre>{{response}}</pre>`, {\r",
									"    response: JSON.stringify(results, null, 2)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b232e6be-e77a-42a5-80f3-6e8bc645f97a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/Drives/b!hf7fQo5shUmr9-LsXYRItRdMXfuy1-lBicYuekA6JkEUVJvaVkInRpKsoKBDJaBq/root:/FedEx"
					},
					"response": []
				},
				{
					"name": "GET Search by VIN in Contracts Site",
					"id": "a96ca9bc-6145-4d90-aad2-aaf379a51878",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/Drives/b!hf7fQo5shUmr9-LsXYRItRdMXfuy1-lBicYuekA6JkEUVJvaVkInRpKsoKBDJaBq/root:/FedEx:/search(q='{1M1AN4GY1PM035934}')"
					},
					"response": []
				},
				{
					"name": "GET Site ID of Group - General IT",
					"id": "7724739c-6c87-4906-a296-163142146b2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/groups/7d9f4924-99d9-46ec-9ece-f1b5a369fa56/sites/root"
					},
					"response": []
				},
				{
					"name": "GET List of Groups",
					"id": "612c3757-6fbd-40b9-b73b-9e92d48097cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/groups"
					},
					"response": []
				},
				{
					"name": "GET List of Sites",
					"id": "84f07687-679c-4ebb-afff-8b9c2aae2ac1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"url": "https://graph.microsoft.com/v1.0/sites"
					},
					"response": []
				},
				{
					"name": "PUT Upload File to General IT - TEST",
					"id": "9074ab1c-6a79-4c7e-8f62-ba015af2424a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{microsoft_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "test,test,test",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": "https://graph.microsoft.com/v1.0/Drives/b!5kb1FqhzQU6uuVtAY-0ADw9iqpw8HN5PmgivNUrL6wfw8L0CyVuzTrsBZ4apx6W_/items/01CCBEUGXLUZ73M5U7IFEJ5XYGX4DMTVAE:/test.csv:/content"
					},
					"response": []
				}
			],
			"id": "3674dee9-314d-4045-9771-28c7d370e73f",
			"auth": {
				"type": "oauth2",
				"oauth2": {
					"authUrl": "https://login.microsoftonline.com/874315e0-a2fe-40f8-9587-a887d266e968/oauth2/v2.0/authorize?access_type=offline&prompt=consent",
					"refreshTokenUrl": "https://login.microsoftonline.com/874315e0-a2fe-40f8-9587-a887d266e968/oauth2/v2.0/token",
					"accessTokenUrl": "https://login.microsoftonline.com/874315e0-a2fe-40f8-9587-a887d266e968/oauth2/v2.0/token",
					"client_authentication": "body",
					"grant_type": "authorization_code",
					"redirect_uri": "https://oauth.pstmn.io/v1/browser-callback",
					"scope": "https://graph.microsoft.com/.default",
					"state": "",
					"clientSecret": "{{prod_microsoft_client_secret}}",
					"clientId": "{{prod_microsoft_client_id}}",
					"tokenName": "Microsoft Production",
					"refreshRequestParams": [],
					"tokenRequestParams": [],
					"authRequestParams": [],
					"challengeAlgorithm": "S256",
					"addTokenTo": "header"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5768134-4b6b-49ee-a7bf-5ab171b304c7",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4a8fb73d-8caa-4fa1-a096-8425fae4d1d1",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Postman",
			"item": [
				{
					"name": "Create Webhook",
					"id": "822a4308-8fac-4b1d-b342-9b388c7d2d60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"value": "PMAK-662145afcce8640001f46fe6-193c9ee0349367ff46d6c83348996cae99",
								"key": "X-API-Key",
								"in": "header"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json",
								"type": "text"
							},
							{
								"key": "x-workspace-id",
								"value": "69846068-eace-44a2-859b-d7fdf1b963c6",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"webhook\":{\r\n        \"name\": \"Refresh Access Token\",\r\n        \"collection\": \"28539332-d56f4aa6-8dac-412d-b755-54004049624c\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/webhooks?workspace=69846068-eace-44a2-859b-d7fdf1b963c6",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"webhooks"
							],
							"query": [
								{
									"key": "workspace",
									"value": "69846068-eace-44a2-859b-d7fdf1b963c6"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "f83a4627-3188-47d2-8543-77a900ac56a2"
		},
		{
			"name": "Zoho Analytics",
			"item": [
				{
					"name": "Generate Access Token and Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0fa0e6e-2790-4cd5-8a27-fdf36d799437",
								"exec": [
									"if (responseCode.code === 200)\r",
									"{\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"    pm.environment.set(\"prod-refresh-token-analytics\", jsonData.refresh_token);\r",
									"    pm.environment.set(\"prod-access-token-analytics\", jsonData.access_token);\r",
									"    pm.environment.set(\"prod-expiry-time-analytics\", Date.now() + parseInt(jsonData.expires_in));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5b78667e-ec72-4c92-98b9-0cf19fa4985f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://accounts.zoho.com/oauth/v2/token?code=1000.ea6f93acc83e15178ae39b4126027860.1256dc61e4a80bce8178a57fc02d6893&client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&grant_type=authorization_code",
							"protocol": "https",
							"host": [
								"accounts",
								"zoho",
								"com"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							],
							"query": [
								{
									"key": "code",
									"value": "1000.ea6f93acc83e15178ae39b4126027860.1256dc61e4a80bce8178a57fc02d6893"
								},
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "authorization_code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "312d235f-3e0b-457e-af00-5bd6538f00cc",
								"exec": [
									"pm.variables.set(\"analytics_refresh_token\", pm.environment.get(\"prod-refresh-token-analytics\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "40e77122-a9a5-4a2f-a385-99c0ee57498d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://accounts.zoho.com/oauth/v2/token?refresh_token={{prod-refresh-token-analytics}}&client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&grant_type=refresh_token",
							"protocol": "https",
							"host": [
								"accounts",
								"zoho",
								"com"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							],
							"query": [
								{
									"key": "refresh_token",
									"value": "{{prod-refresh-token-analytics}}"
								},
								{
									"key": "client_id",
									"value": "{{prod_zoho_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{prod_zoho_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "refresh_token"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Row - Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69fcec36-a060-4563-9188-f7c3aa321c99",
								"exec": [
									"const moment = require('moment');\r",
									"let today = moment().format(\"YYYY-MM-DD\");\r",
									"\r",
									"let jsonObj = {\r",
									"  \"columns\": {\r",
									"    \"PD Creation Date\": today\r",
									"  },\r",
									"  \"criteria\": \"\\\"tblLeaseTimelinessKPIs\\\".\\\"Account Name\\\"='Daimler'\"\r",
									"};\r",
									"\r",
									"let jsonString = JSON.stringify(jsonObj);\r",
									"console.log(\"jsonString: \" + jsonString);\r",
									"let encodedStr = encodeURIComponent(jsonString);\r",
									"console.log(\"encoded json: \" + encodedStr);\r",
									"pm.variables.set(\"config\", encodedStr);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4d389a03-866d-4dba-a821-8c77d231796f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ZANALYTICS-ORGID",
								"value": "769480731",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Zoho-oauthtoken 1000.e9fb969c718d8ac27ff585921ea50980.2d0deddea6c7b06826a596dc6e4da2a0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://analyticsapi.zoho.com/restapi/v2/workspaces/2511359000010621002/views/2511359000010934056/rows?CONFIG={{config}}",
							"protocol": "https",
							"host": [
								"analyticsapi",
								"zoho",
								"com"
							],
							"path": [
								"restapi",
								"v2",
								"workspaces",
								"2511359000010621002",
								"views",
								"2511359000010934056",
								"rows"
							],
							"query": [
								{
									"key": "CONFIG",
									"value": "{{config}}",
									"type": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Row in NetSuite AR",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69fcec36-a060-4563-9188-f7c3aa321c99",
								"exec": [
									"let config = JSON.parse(pm.variables.get(\"config\"));\r",
									"console.log(\"config \" + config[\"GROUP(invoicenum)\"]);\r",
									"\r",
									"let maxCust = config[\"MAX(entity)\"];\r",
									"let invNo = config[\"GROUP(invoicenum)\"];\r",
									"let sumRem = config[\"SUM(amountremaining)\"];\r",
									"let maxOfDueDate = config[\"MAX(duedate)\"];\r",
									"let maxOfDate = config[\"MAX(trandate)\"];\r",
									"\r",
									"let jsonObj = {\r",
									"  \"columns\": {\r",
									"    \"Maximum of Customer\": maxCust,\r",
									"    \"Invoice Number\": invNo,\r",
									"    \"Sum of Amount Remaining\": sumRem,\r",
									"    \"Maximum of Due Date\": maxOfDueDate,\r",
									"    \"Maximum of Date\": maxOfDate\r",
									"  }\r",
									"};\r",
									"\r",
									"let jsonString = JSON.stringify(jsonObj);\r",
									"console.log(\"jsonString: \" + jsonString);\r",
									"let encodedStr = encodeURIComponent(jsonString);\r",
									"console.log(\"encoded json: \" + encodedStr);\r",
									"pm.variables.set(\"config\", encodedStr);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6c838624-9b10-45da-8d8a-e2894c6f858c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ZANALYTICS-ORGID",
								"value": "769480731",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Zoho-oauthtoken {{analytics-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://analyticsapi.zoho.com/restapi/v2/workspaces/2511359000014178125/views/2511359000014195322/rows?CONFIG={{config}}",
							"protocol": "https",
							"host": [
								"analyticsapi",
								"zoho",
								"com"
							],
							"path": [
								"restapi",
								"v2",
								"workspaces",
								"2511359000014178125",
								"views",
								"2511359000014195322",
								"rows"
							],
							"query": [
								{
									"key": "CONFIG",
									"value": "{{config}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Rows in NetSuiteAR",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e61b3972-fb1e-4d11-9cdb-3d07ab6d3ad0",
								"exec": [
									"let jsonObj = {\r",
									"  \"deleteAllRows\": \"true\"\r",
									"};\r",
									"\r",
									"let jsonString = JSON.stringify(jsonObj);\r",
									"console.log(\"jsonString: \" + jsonString);\r",
									"let encodedStr = encodeURIComponent(jsonString);\r",
									"console.log(\"encoded json: \" + encodedStr);\r",
									"pm.variables.set(\"config\", encodedStr);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5eda5c74-910f-4add-861b-9a617f3384e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ZANALYTICS-ORGID",
								"value": "769480731",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Zoho-oauthtoken {{analytics-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://analyticsapi.zoho.com/restapi/v2/workspaces/2511359000014178125/views/2511359000014195322/rows?CONFIG={{config}}",
							"protocol": "https",
							"host": [
								"analyticsapi",
								"zoho",
								"com"
							],
							"path": [
								"restapi",
								"v2",
								"workspaces",
								"2511359000014178125",
								"views",
								"2511359000014195322",
								"rows"
							],
							"query": [
								{
									"key": "CONFIG",
									"value": "{{config}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "9c9dc0a4-ad69-42ea-a715-5974788ec2c1"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8e19be1f-6ce4-4304-b72e-bad57ad18ea4",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "23a98215-2117-477b-9c99-99d5d0d11c81",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}